<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ald.fanbei.api.dal.dao.AfBorrowDao">
	<sql id="queryFields">
		id rid,gmt_create, gmt_modified,borrow_no,user_id,type,name,amount,status,remark,nper,nper_repayment,overdue_num,order_id,
		nper_amount,repay_prin_amount,order_no,card_number,card_name,borrow_rate,calculate_method,free_nper
	</sql>
	
	<select id="getBorrowById" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND id = #{id}
    </select>
    
    <select id="getBorrowByOrderId" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND order_id = #{orderId} LIMIT 1
    </select>
    
    <select id="getBorrowByOrderIdAndStatus" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND order_id = #{orderId} and status = #{status} LIMIT 1
    </select>
    
    

	<insert id="addBorrow" keyProperty="rid" useGeneratedKeys="true" parameterType="AfBorrowDo">
		INSERT INTO af_borrow (
			gmt_create,
			gmt_modified,
			user_id,
			type,
			borrow_no,
			name,
			remark,
			amount,
			status,
			nper,
			nper_amount,
			card_number,
			card_name,
			order_id,
			order_no,
			gmt_transed,
			borrow_rate,
			calculate_method,
			free_nper
			)
			VALUES
			(
			#{gmtCreate},
			#{gmtCreate},
			#{userId},
			#{type},
			#{borrowNo},
			#{name},
			#{remark},
			#{amount},
			#{status},
			#{nper},
			#{nperAmount},
			#{cardNumber},
			#{cardName},
			#{orderId},
			#{orderNo},
			#{gmtTransed},
			#{borrowRate},
			#{calculateMethod},
			#{freeNper}
			)
	</insert>
	
	<insert id="addBorrowBillInfo" keyProperty="rid" useGeneratedKeys="true" parameterType="AfBorrowBillDo">
		  INSERT INTO af_borrow_bill (
		  gmt_create,
		  gmt_modified,
		  user_id,
		  borrow_id,
		  borrow_no,
		  name,
		  status,
		  type,
		  gmt_borrow,
		  bill_year,
		  bill_month,
		  nper,
		  bill_nper,
		  bill_amount,
		  principle_amount,
		  interest_amount,
		  poundage_amount
		) 
		VALUES
	    (
	    	NOW(),
	    	NOW(),
	  		#{userId}, 
	  		#{borrowId},
	  		#{borrowNo},  
	  		#{name}, 
	  		#{status},
	  		#{type},
	  		#{gmtBorrow}, 
	  		#{billYear},
	  		#{billMonth},
	  		#{nper}, 
	  		#{billNper}, 
	  		#{billAmount}, 
	  		#{principleAmount},
	  		#{interestAmount},
	  		#{poundageAmount}
	  	)
   </insert>
   
	<insert id="addBorrowBill" parameterType="java.util.List">
		  INSERT INTO af_borrow_bill (
		  gmt_create,
		  gmt_modified,
		  user_id,
		  borrow_id,
		  borrow_no,
		  name,
		  status,
		  type,
		  gmt_borrow,
		  bill_year,
		  bill_month,
		  nper,
		  bill_nper,
		  bill_amount,
		  principle_amount,
		  interest_amount,
		  poundage_amount,
		  is_free_interest,
		  gmt_out_day,
		  gmt_pay_time
		) 
		VALUES
	    <foreach collection = "list" separator = "," item = "item" index = "index" > 
	    (
	    	NOW(),
	    	NOW(),
	  		#{item.userId}, 
	  		#{item.borrowId},
	  		#{item.borrowNo},  
	  		#{item.name}, 
	  		#{item.status},
	  		#{item.type},
	  		#{item.gmtBorrow}, 
	  		#{item.billYear},
	  		#{item.billMonth},
	  		#{item.nper}, 
	  		#{item.billNper}, 
	  		#{item.billAmount}, 
	  		#{item.principleAmount},
	  		#{item.interestAmount},
	  		#{item.poundageAmount},
	  		#{item.isFreeInterest},
			#{item.gmtOutDay},
			#{item.gmtPayTime}
	  	)
	  	</foreach> 
   </insert>
   
   <update id="updateBorrow">
		UPDATE
			af_borrow
		SET
			gmt_modified = NOW(),
			total_interest = #{totalInterest},
			total_poundage = #{totalPoundage}
		WHERE
			id = #{id}
	</update>
	
	<select id="getCurrentLastBorrowNo" resultType="java.lang.String">
		select borrow_no from af_borrow WHERE borrow_no LIKE CONCAT(#{orderNoPre},"%") ORDER BY id DESC LIMIT 1;
	</select>
	
	<update id="updateBorrowStatus">
		UPDATE
			af_borrow
		SET
			gmt_modified = NOW(),
			status = #{status}
		WHERE
			id = #{id}
	</update>
	
	<select id="getBorrowNumByUserId" resultType="java.lang.Integer">
		select count(*) from `af_borrow` WHERE `status` in ('TRANSED','FINISH') and `user_id` =#{userId}; 
	</select>
	
	<select id="getBorrowInfoByBorrowNo" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND borrow_no = #{borrowNo} LIMIT 1
	</select>

	<select id="getUserNotInBorrow" resultType="AfBorrowDto">
		SELECT
			a.id rid,
			a.NAME name,
			a.amount amount,
			c.gmt_pay payDate
		FROM
			af_borrow a
		LEFT JOIN af_borrow_extend b ON a.id = b.id
		LEFT JOIN af_order c on c.id = a.order_id
		WHERE
			a.is_delete = 0
		AND a.user_id = #{userId}
		AND b.in_bill = 0
		AND a.status = 'TRANSED'
		order by a.gmt_create desc
	</select>

	<select id="getUserSummary" resultType="java.util.HashMap">
		SELECT IFNULL(TIMESTAMPDIFF(HOUR,(SELECT gmt_risk  FROM af_user_auth WHERE user_id =c.user_id   LIMIT 1 ),(SELECT min(gmt_create)  FROM af_borrow_cash WHERE user_id =c.user_id  and `status`='FINSH' )),0) hourBetweenVerifyBorrow,
IFNULL(COUNT(if(overdue_day>=4,true,null))/COUNT(id),0) as rateAfter4Day,
IFNULL(TIMESTAMPDIFF(HOUR,MIN(gmt_create),MAX(gmt_create))/COUNT(id),0) frequency,
IFNULL(COUNT(if(type='SEVEN',true,null))/COUNT(id),0) as rateBorrow7d,
IFNULL(COUNT(if(overdue_status='Y',true,null))/COUNT(id),0) as rateOverdue,
IFNULL(sum(c.repay_amount),0)  totalAmount  ,
COUNT(if(overdue_status='Y',true,null))   countOverdue  ,
IFNULL((SELECT  c1.amount    FROM  af_borrow_cash c1 WHERE  c1.user_id  =c.user_id    and  c1.`status`='FINSH'    order  by  c1.gmt_create  desc  LIMIT  1  ) ,0) lastAmount,
IFNULL((SELECT  c1.overdue_day    FROM  af_borrow_cash c1  WHERE  c1.user_id  =c.user_id    and  c1.`status`='FINSH'    order  by  c1.gmt_create  desc  LIMIT  1  ),0)  lastOverdueDay,
IFNULL(MAX(c.overdue_day  ),0)  maxOverdueDay,
DATE_FORMAT(min(c.gmt_create),'%Y-%m-%d %H:%i:%s') firstBorrowTime
FROM af_borrow_cash c WHERE  `status`='FINSH' and user_id =#{userId};
	</select>
	<select id="getUserNotInBorrowCount" resultType="java.lang.Integer">
		SELECT
			count(1)
		FROM
			af_borrow a
		LEFT JOIN af_borrow_extend b ON a.id = b.id
		LEFT JOIN af_order c on c.id = a.order_id
		WHERE
			a.is_delete = 0
		AND a.user_id = #{userId}
		AND a.status = 'TRANSED'
		AND b.in_bill = 0
	</select>

	<select id="getUserNotInBorrowMoney" resultType="java.math.BigDecimal">
		SELECT
			COALESCE (SUM(a.amount), 0)
		FROM
			af_borrow a
		LEFT JOIN af_borrow_extend b ON a.id = b.id
		LEFT JOIN af_order c on c.id = a.order_id
		WHERE
			a.is_delete = 0
		AND a.user_id = #{userId}
		AND a.status = 'TRANSED'
		AND b.in_bill = 0
	</select>

	<select id="getUserSummaryOrderById" resultType="java.util.HashMap">
		SELECT (SELECT DATE_FORMAT(MIN(bi.`gmt_pay_time`), '%Y-%m-%d')  FROM `af_borrow_bill` bi LEFT JOIN af_borrow b ON b.id=bi.borrow_id WHERE b.order_id = o.id) firstDueDate,o.`order_type` orderType,o.`pay_type` payType,o.`sec_type` secType,o.`order_no` orderNo,o.`user_coupon_id` userCouponId,o.`goods_id` goodsId,o.`goods_name` goodsName,o.`count` count,o.`actual_amount` actualAmount,o.`borrow_amount` borrowAmount,o.`bank_amount` bankAmount
,CASE WHEN  o.`order_type` ='BOLUOME' THEN  (SELECT wm.`restaurant_name`  FROM `af_boluome_waimai` wm WHERE wm.`third_order_no` =o.`third_order_no`  LIMIT 1) ELSE o.`shop_name` END  shopName
,o.`rebate_amount` rebateAmount ,o.`commission_amount`  commissionAmount,o.`rebate_allowance_amount` rebateAllowanceAmount,o.`nper` nper,o.`borrow_rate` borrowRate,o.`coupon_amount` couponAmount,o.`au_amount` auAmount,o.`used_amount` usedAmount ,
(SELECT c.`name`  FROM `af_goods` g LEFT JOIN `af_goods_category` c on g.`primary_category_id`  = c.`id` WHERE g.`id` = o.`goods_id`     LIMIT 1) categoryOne,
(SELECT c.`name`  FROM `af_goods` g LEFT JOIN `af_goods_category` c on g.`category_id`   = c.`id` WHERE g.`id` = o.`goods_id`    LIMIT 1 ) categoryTwo,
(SELECT (SELECT s.`name`  FROM `af_goods_category` s WHERE s.`id`  = c.`parent_id`   LIMIT 1) FROM `af_goods` g LEFT JOIN `af_goods_category` c on g.`category_id`  = c.`id` WHERE g.`id` = o.`goods_id`   ) categoryThree,
(SELECT fo.`type`  FROM `af_trade_order` tr LEFT JOIN `af_trade_business_info` fo on tr.`business_id`   = fo.`business_id` WHERE  tr.`order_id` = o.`id`   LIMIT 1 ) typeName,
o.`ip` ,o.`lat` ,o.`lng`
, CASE WHEN  o.`order_type` ='BOLUOME' THEN  (SELECT wm.`contact_addr`  FROM `af_boluome_waimai` wm WHERE wm.`third_order_no` =o.`third_order_no`   LIMIT 1) ELSE o.`address` END  address
,  CASE WHEN  o.`order_type` ='BOLUOME' THEN  '' ELSE o.`province` END  province
, CASE WHEN  o.`order_type` ='BOLUOME' THEN   '' ELSE o.`city` END  city
,  CASE WHEN  o.`order_type` ='BOLUOME' THEN   '' ELSE o.`district` END  district
,  CASE WHEN  o.`order_type` ='BOLUOME' THEN  (SELECT wm.`contact_mobile`  FROM `af_boluome_waimai` wm WHERE wm.`third_order_no` =o.`third_order_no`   LIMIT 1) ELSE o.`consignee_mobile` END  consigneeMobile
,CASE WHEN  o.`order_type` ='BOLUOME' THEN  (SELECT wm.`contact_name`  FROM `af_boluome_waimai` wm WHERE wm.`third_order_no` =o.`third_order_no`   LIMIT 1) ELSE o.`consignee` END consignee,o.`gmt_deliver` ,
(SELECT sh.`area`  FROM `af_boluome_shouji` sh WHERE sh.`third_order_no` = o.`third_order_no`   LIMIT 1) area,
(SELECT sh.`phone`   FROM `af_boluome_shouji` sh WHERE sh.`third_order_no` = o.`third_order_no`   LIMIT 1) phone,
/*(SELECT wm.`goodsInfo`  FROM `af_boluome_waimai` wm WHERE wm.`third_order_no` =o.`third_order_no`    LIMIT 1)  goodsInfo,*/
(SELECT wm.`quantity`   FROM `af_boluome_waimai` wm WHERE wm.`third_order_no` =o.`third_order_no`    LIMIT 1)  quantity,
(SELECT jy.`phone`  FROM `af_boluome_jiayouka` jy WHERE jy.`third_order_no` = o.`third_order_no`   LIMIT 1) gasPhone,
(SELECT br.`calculate_method`  FROM `af_borrow` br WHERE br.`order_id` = o.`id`   LIMIT 1 ) calculateMethod,
(SELECT br.`free_nper`   FROM `af_borrow` br WHERE br.`order_id` = o.`id`    LIMIT 1) freeNper,
(SELECT br.`nper_amount`   FROM `af_borrow` br WHERE br.`order_id` = o.`id`    LIMIT 1) nperAmount,
(SELECT br.`card_number`   FROM `af_borrow` br WHERE br.`order_id` = o.`id`    LIMIT 1) cardNumber,
(SELECT br.`card_name`   FROM `af_borrow` br WHERE br.`order_id` = o.`id`    LIMIT 1) cardName
FROM `af_order` o  WHERE o.`id`  =#{id}
	</select>



</mapper>
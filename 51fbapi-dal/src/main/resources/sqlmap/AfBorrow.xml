<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ald.fanbei.api.dal.dao.AfBorrowDao">
	<sql id="queryFields">
		id rid,gmt_create, gmt_modified,borrow_no,user_id,type,name,amount,status,remark,nper,nper_repayment,overdue_num,order_id,
		nper_amount,repay_prin_amount,order_no,card_number,card_name,borrow_rate,calculate_method,free_nper
	</sql>
	
	<select id="getBorrowById" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND id = #{id}
    </select>
    
    <select id="getBorrowByOrderId" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND order_id = #{orderId} LIMIT 1
    </select>
    
    <select id="getBorrowByOrderIdAndStatus" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND order_id = #{orderId} and status = #{status} LIMIT 1
    </select>
    
    

	<insert id="addBorrow" keyProperty="rid" useGeneratedKeys="true" parameterType="AfBorrowDo">
		INSERT INTO af_borrow (
			gmt_create,
			gmt_modified,
			user_id,
			type,
			borrow_no,
			name,
			remark,
			amount,
			status,
			nper,
			nper_amount,
			card_number,
			card_name,
			order_id,
			order_no,
			gmt_transed,
			borrow_rate,
			calculate_method,
			free_nper
			)
			VALUES
			(
			#{gmtCreate},
			#{gmtCreate},
			#{userId},
			#{type},
			#{borrowNo},
			#{name},
			#{remark},
			#{amount},
			#{status},
			#{nper},
			#{nperAmount},
			#{cardNumber},
			#{cardName},
			#{orderId},
			#{orderNo},
			#{gmtTransed},
			#{borrowRate},
			#{calculateMethod},
			#{freeNper}
			)
	</insert>
	
	<insert id="addBorrowBillInfo" keyProperty="rid" useGeneratedKeys="true" parameterType="AfBorrowBillDo">
		  INSERT INTO af_borrow_bill (
		  gmt_create,
		  gmt_modified,
		  user_id,
		  borrow_id,
		  borrow_no,
		  name,
		  status,
		  type,
		  gmt_borrow,
		  bill_year,
		  bill_month,
		  nper,
		  bill_nper,
		  bill_amount,
		  principle_amount,
		  interest_amount,
		  poundage_amount
		) 
		VALUES
	    (
	    	NOW(),
	    	NOW(),
	  		#{userId}, 
	  		#{borrowId},
	  		#{borrowNo},  
	  		#{name}, 
	  		#{status},
	  		#{type},
	  		#{gmtBorrow}, 
	  		#{billYear},
	  		#{billMonth},
	  		#{nper}, 
	  		#{billNper}, 
	  		#{billAmount}, 
	  		#{principleAmount},
	  		#{interestAmount},
	  		#{poundageAmount}
	  	)
   </insert>
   
	<insert id="addBorrowBill" parameterType="java.util.List">
		  INSERT INTO af_borrow_bill (
		  gmt_create,
		  gmt_modified,
		  user_id,
		  borrow_id,
		  borrow_no,
		  name,
		  status,
		  type,
		  gmt_borrow,
		  bill_year,
		  bill_month,
		  nper,
		  bill_nper,
		  bill_amount,
		  principle_amount,
		  interest_amount,
		  poundage_amount,
		  is_free_interest,
		  gmt_out_day,
		  gmt_pay_time
		) 
		VALUES
	    <foreach collection = "list" separator = "," item = "item" index = "index" > 
	    (
	    	NOW(),
	    	NOW(),
	  		#{item.userId}, 
	  		#{item.borrowId},
	  		#{item.borrowNo},  
	  		#{item.name}, 
	  		#{item.status},
	  		#{item.type},
	  		#{item.gmtBorrow}, 
	  		#{item.billYear},
	  		#{item.billMonth},
	  		#{item.nper}, 
	  		#{item.billNper}, 
	  		#{item.billAmount}, 
	  		#{item.principleAmount},
	  		#{item.interestAmount},
	  		#{item.poundageAmount},
	  		#{item.isFreeInterest},
			#{item.gmtOutDay},
			#{item.gmtPayTime}
	  	)
	  	</foreach> 
   </insert>
   
   <update id="updateBorrow">
		UPDATE
			af_borrow
		SET
			gmt_modified = NOW(),
			total_interest = #{totalInterest},
			total_poundage = #{totalPoundage}
		WHERE
			id = #{id}
	</update>
	
	<select id="getCurrentLastBorrowNo" resultType="java.lang.String">
		select borrow_no from af_borrow WHERE borrow_no LIKE CONCAT(#{orderNoPre},"%") ORDER BY id DESC LIMIT 1;
	</select>
	
	<update id="updateBorrowStatus">
		UPDATE
			af_borrow
		SET
			gmt_modified = NOW(),
			status = #{status}
		WHERE
			id = #{id}
	</update>
	
	<select id="getBorrowNumByUserId" resultType="java.lang.Integer">
		select count(*) from `af_borrow` WHERE `status` in ('TRANSED','FINISH') and `user_id` =#{userId}; 
	</select>
	
	<select id="getBorrowInfoByBorrowNo" resultType="AfBorrowDo">
		SELECT 
			<include refid="queryFields"/>
		FROM af_borrow WHERE is_delete = 0 AND borrow_no = #{borrowNo} LIMIT 1
	</select>


	<select id="getUserSummary" resultType="java.util.HashMap">
		SELECT
time_format(timediff((SELECT min(gmt_create)  FROM af_borrow_cash WHERE user_id =c.user_id  and `status`='FINSH' ) ,
(SELECT gmt_risk  FROM af_user_auth WHERE user_id =c.user_id   LIMIT 1 )),'%H') hourBetweenVerifyBorrow,
COUNT(if(overdue_day>=4,true,null))/COUNT(id)*100 as rateAfter4Day,
datediff(MAX(gmt_create),MIN(gmt_create))/COUNT(id)*100 frequency,
COUNT(if(type='SEVEN',true,null))/COUNT(id)*100 as rateBorrow7d,
COUNT(if(overdue_status='Y',true,null))/COUNT(id)*100 as rateOverdue
FROM af_borrow_cash c WHERE  `status`='FINSH' and user_id =#{userId};
	</select>




</mapper>
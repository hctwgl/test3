<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 定义producer的参数 -->
	<bean id="producerProperties" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="bootstrap.servers" value="${kafka.producer.servers}"/>
				<entry key="retries" value="${kafka.producer.retries}"/>
				<entry key="batch.size" value="${kafka.producer.batch.size}"/>
				<entry key="linger.ms" value="${kafka.producer.linger}"/>
				<entry key="buffer.memory" value="${kafka.producer.buffer.memory}"/>
				<entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
				<entry key="value.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
			</map>
		</constructor-arg>
	</bean>

	<!-- 创建kafkatemplate需要使用的producerfactory bean -->
	<bean id="producerFactory" class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
		<constructor-arg>
			<ref bean="producerProperties"/>
		</constructor-arg>
	</bean>

	<!-- 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 -->
	<bean id="KafkaTemplate" class="org.springframework.kafka.core.KafkaTemplate">
	<constructor-arg ref="producerFactory"/>
	<constructor-arg name="autoFlush" value="true"/>
	</bean>

	<!-- 定义consumer的参数
	<bean id="consumerProperties" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="bootstrap.servers" value="${kafka.producer.servers}"/>
				<entry key="group.id" value="${kafka.consumer.group.id}"/>
				<entry key="enable.auto.commit" value="true"/>
				<entry key="auto.commit.interval.ms" value="1000"/>
				<entry key="session.timeout.ms" value="15000"/>
				<entry key="key.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
				<entry key="value.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
			</map>
		</constructor-arg>
	</bean>

	&lt;!&ndash; 创建consumerFactory bean &ndash;&gt;
	<bean id="consumerFactory" class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
		<constructor-arg>
			<ref bean="consumerProperties"/>
		</constructor-arg>
	</bean>-->

	<!--&lt;!&ndash; 强弱风控 &ndash;&gt;-->
	<!--<bean id="riskResultConsumer" class="com.ald.fanbei.api.web.consumer.RiskResultConsumer"/>-->

	<!--&lt;!&ndash; 消费者容器配置信息 &ndash;&gt;-->
	<!--<bean id="riskResultConsumerContainerProperties" class="org.springframework.kafka.listener.config.ContainerProperties">-->
		<!--<constructor-arg value="${ald-credit-risk-weak-notify}"/>-->
		<!--<property name="messageListener" ref="riskResultConsumer"/>-->
	<!--</bean>-->

	<!--&lt;!&ndash; 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 &ndash;&gt;-->
	<!--<bean id="messageListenerContainer" class="org.springframework.kafka.listener.KafkaMessageListenerContainer" init-method="doStart">-->
		<!--<constructor-arg ref="consumerFactory"/>-->
		<!--<constructor-arg ref="riskResultConsumerContainerProperties"/>-->
	<!--</bean>-->

    <!--&lt;!&ndash; 同步用户信息 &ndash;&gt;-->
    <!--<bean id="riskTianJiConsumer" class="com.ald.fanbei.api.web.consumer.RiskTianJiConsumer"/>-->

    <!--&lt;!&ndash; 消费者容器配置信息 &ndash;&gt;-->
    <!--<bean id="riskTianJiConsumerContainerProperties" class="org.springframework.kafka.listener.config.ContainerProperties">-->
        <!--<constructor-arg value="${ald-fk-tianji-notify}"/>-->
        <!--<property name="messageListener" ref="riskTianJiConsumer"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 &ndash;&gt;-->
    <!--<bean id="riskTianJiMessageListenerContainer" class="org.springframework.kafka.listener.KafkaMessageListenerContainer" init-method="doStart">-->
        <!--<constructor-arg ref="consumerFactory"/>-->
        <!--<constructor-arg ref="riskTianJiConsumerContainerProperties"/>-->
    <!--</bean>-->

</beans>